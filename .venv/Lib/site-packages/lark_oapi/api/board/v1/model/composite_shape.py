# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CompositeShape(object):
    _types = {
        "type": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompositeShapeBuilder":
        return CompositeShapeBuilder()


class CompositeShapeBuilder(object):
    def __init__(self) -> None:
        self._composite_shape = CompositeShape()

    def type(self, type: str) -> "CompositeShapeBuilder":
        self._composite_shape.type = type
        return self

    def build(self) -> "CompositeShape":
        return self._composite_shape

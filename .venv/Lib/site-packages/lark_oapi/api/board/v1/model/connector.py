# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .connector_attached_object import ConnectorAttachedObject
from .connector_attached_object import ConnectorAttachedObject
from .connector_caption import ConnectorCaption


class Connector(object):
    _types = {
        "start_object": ConnectorAttachedObject,
        "end_object": ConnectorAttachedObject,
        "captions": ConnectorCaption,
    }

    def __init__(self, d=None):
        self.start_object: Optional[ConnectorAttachedObject] = None
        self.end_object: Optional[ConnectorAttachedObject] = None
        self.captions: Optional[ConnectorCaption] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ConnectorBuilder":
        return ConnectorBuilder()


class ConnectorBuilder(object):
    def __init__(self) -> None:
        self._connector = Connector()

    def start_object(self, start_object: ConnectorAttachedObject) -> "ConnectorBuilder":
        self._connector.start_object = start_object
        return self

    def end_object(self, end_object: ConnectorAttachedObject) -> "ConnectorBuilder":
        self._connector.end_object = end_object
        return self

    def captions(self, captions: ConnectorCaption) -> "ConnectorBuilder":
        self._connector.captions = captions
        return self

    def build(self) -> "Connector":
        return self._connector
